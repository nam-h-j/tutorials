definitions:
  model.User:
    properties:
      created_at:
        type: string
      email:
        type: string
      f_name:
        type: string
      l_name:
        type: string
      user_id:
        type: integer
    type: object
  model.UserListResult:
    properties:
      cmd:
        example: INSERT/SELECT/UPDATE/DELETE
        type: string
      message:
        example: success
        type: string
      status:
        example: 200
        type: integer
      user_list:
        items:
          $ref: '#/definitions/model.User'
        type: array
    type: object
  model.UserPostReq:
    properties:
      email:
        type: string
      f_name:
        type: string
      l_name:
        type: string
    type: object
  model.UserPutReq:
    properties:
      f_name:
        type: string
      l_name:
        type: string
      user_id:
        type: integer
    type: object
  model.UserResult:
    properties:
      cmd:
        example: INSERT/SELECT/UPDATE/DELETE
        type: string
      message:
        example: success
        type: string
      status:
        example: 200
        type: integer
      user_data:
        $ref: '#/definitions/model.User'
    type: object
  router.welcomeModel:
    properties:
      id:
        example: 1
        format: int64
        type: integer
      name:
        example: account name
        type: string
    type: object
info:
  contact: {}
  description: GO BASE PROJ API
  title: GO BASE PROJ
  version: "1.0"
paths:
  /user:
    post:
      description: 유저 정보를 등록합니다.
      parameters:
      - description: 유저 정보 JSON Format
        in: body
        name: Param
        required: true
        schema:
          $ref: '#/definitions/model.UserPostReq'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.UserResult'
            type: array
      summary: 유저 정보 등록
      tags:
      - 유저 정보 관리
    put:
      description: 유저 정보를 수정합니다.
      parameters:
      - description: 유저 정보 JSON Format
        in: body
        name: Param
        required: true
        schema:
          $ref: '#/definitions/model.UserPutReq'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.UserResult'
            type: array
      summary: 유저 정보 수정
      tags:
      - 유저 정보 관리
  /user/:
    get:
      description: 유저 정보 목록을 가져옵니다.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.UserListResult'
            type: array
      summary: 유저 정보 목록 열람
      tags:
      - 유저 정보 관리
  /user/{userId}:
    delete:
      description: user_id과 관련된 유저 정보값을 가져옵니다.
      parameters:
      - description: 삭제할 유저 정보의 유저 시리얼(아이디)
        in: path
        name: userId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.UserResult'
            type: array
      summary: 유저 정보 열람
      tags:
      - 유저 정보 관리
    get:
      description: user_id과 관련된 유저 정보값을 가져옵니다.
      parameters:
      - description: 가져올 유저 정보의 유저 시리얼(아이디)
        in: path
        name: userId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.UserResult'
            type: array
      summary: 유저 정보 열람
      tags:
      - 유저 정보 관리
  /welcome/{name}:
    get:
      consumes:
      - application/json
      description: 스웨거 테스트용 핸들러 Desc
      parameters:
      - description: User name
        in: path
        name: name
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/router.welcomeModel'
      summary: 스웨거 테스트용 핸들러
      tags:
      - Welcome!
securityDefinitions:
  user-token:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
